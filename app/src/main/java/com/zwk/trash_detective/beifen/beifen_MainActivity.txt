//此代码要用

package com.zwk.trash_detective.beifen;

import static android.os.Environment.DIRECTORY_PICTURES;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class beifen_MainActivity extends AppCompatActivity {

    File cropfile;
    File imagefile;
    Uri cropuri;
    Uri imageuri;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //cropuri = Uri.fromFile(createImageFile("jpg"));
        //imageuri = Uri.fromFile(createImageFile("temp"));
        cropfile = createImageFile("jpg");
        imagefile = createImageFile("temp");
        imageuri = FileProvider.getUriForFile(getApplicationContext(), getApplicationContext().getPackageName() + ".provider", imagefile);
        cropuri = FileProvider.getUriForFile(getApplicationContext(), getApplicationContext().getApplicationContext().getPackageName() + ".provider", cropfile);
//        imageuri = FileProvider.getUriForFile(getApplicationContext(), getApplicationContext().getApplicationContext().getPackageName() + ".provider", createImageFile("jpg"));
//        cropuri = FileProvider.getUriForFile(getApplicationContext(), getApplicationContext().getApplicationContext().getPackageName() + ".provider", createImageFile("jpg"));
        InitCamera();

    }


    private boolean PermissionCheck(){
        String camera = Manifest.permission.CAMERA;
        String read = Manifest.permission.READ_EXTERNAL_STORAGE;
        String write = Manifest.permission.WRITE_EXTERNAL_STORAGE;
        String[] permissions = new String[]{camera,read,write};
        int granted = this.getPackageManager().PERMISSION_GRANTED;
        if(ContextCompat.checkSelfPermission(this,camera)!=granted
                ||ContextCompat.checkSelfPermission(this,read)!=granted
                ||ContextCompat.checkSelfPermission(this,write)!=granted){
            ActivityCompat.requestPermissions(this,permissions,200);
            return false;
        }else{
            return true;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if(resultCode != Activity.RESULT_OK){
            Toast.makeText(this, "失败", Toast.LENGTH_SHORT).show();
            return;
        }

        switch (requestCode){
            case 1:
                cropImage(imageuri);
                break;
            case 2:
                try {
                    String a;
                    Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(cropuri));
                    //imageView.setImageBitmap(bitmap);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                break;
        }
    }

    public void cropImage(Uri uri){
        ImageView images = findViewById(R.id.imageView3);
        images.setImageURI(uri);
        Intent intent = new Intent("com.android.camera.action.CROP");
        //Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);
        intent.setDataAndType(uri, "image/*");
        intent.putExtra("crop", "true");
        intent.putExtra("aspectX", 1);
        intent.putExtra("aspectY", 1);
        intent.putExtra("outputX", 700);
        intent.putExtra("outputY", 700);
        intent.putExtra("return-data", false);
        intent.putExtra(MediaStore.EXTRA_OUTPUT, cropuri);
        intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
        intent.putExtra("noFaceDetection", true);
        startActivityForResult(intent, 2);
    }

    private void InitCamera(){
        Button start_btn=findViewById(R.id.start);
        start_btn.setOnClickListener(view -> {
            if(PermissionCheck()) {
                if (checkCameraHardware()) {

                    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    //return-data:是将结果保存在data中返回，在onActivityResult中，直接调用intent.getdata()就可以获取值了，这里设为fase，就是不让它保存在data中，
                    intent.putExtra("return-data", false);
                    //MediaStore.EXTRA_OUTPUT：由于我们不让它保存在Intent的data域中，但我们总要有地方来保存我们的图片啊，这个参数就是转移保存地址的，对应Value中保存的URI就是指定的保存地址。
                    intent.putExtra(MediaStore.EXTRA_OUTPUT, imageuri);
                    intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
                    intent.putExtra("noFaceDetection", true);
                    startActivityForResult(intent, 1);
                }
            }
        });

        ImageView image = findViewById(R.id.imageView);
        image.setOnClickListener(view -> {
            ForwardActivity(SettingActivity.class);
        });
        ImageView user = findViewById(R.id.enter_user);
        user.setOnClickListener(view -> {
            ForwardActivity(UserInfoActivity.class);
        });

        ImageView image2 = findViewById(R.id.imageView2);
        image2.setOnClickListener(view -> {
            ForwardActivity(searchActivity.class);
        });

    }

    private File createImageFile(String prefix) {
        File image = null;
        String timeStamp = new SimpleDateFormat("yyyy_MM_dd_hh_MM_ss")
                .format(new Date());
        String imageName = prefix+"_JPEG_" + timeStamp + "_";
        File imageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        //File imageDir = Environment.getExternalStoragePublicDirectory(DIRECTORY_PICTURES);
        try {
            image = File.createTempFile(imageName, ".jpg", imageDir);
        } catch (IOException e) {
            image = null;
            e.printStackTrace();
        }
        return image;
    }


    private boolean checkCameraHardware() {
        if (MainActivity.this.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)){
            return true;
        } else {
            showToast("您的设备中没有相机");
            return false;
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (grantResults.length > 0) {
            if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {
                showToast("没有授权继续操作");
            }
        }
    }

    private void ForwardActivity(Class c){
        Intent intent = new Intent(MainActivity.this, c);
        startActivity(intent);
    }

    private void showToast(final String text) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Toast.makeText(MainActivity.this, text, Toast.LENGTH_SHORT).show();
            }
        });
    }
}


